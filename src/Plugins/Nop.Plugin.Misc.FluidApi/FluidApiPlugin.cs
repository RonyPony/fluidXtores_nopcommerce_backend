using System;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Nop.Core;
using Nop.Core.Domain.Cms;
using Nop.Core.Domain.ScheduleTasks;
using Nop.Services.Cms;
using Nop.Services.Common;
using Nop.Services.Configuration;
using Nop.Services.Localization;
using Nop.Services.Messages;
using Nop.Services.Plugins;
using Nop.Services.ScheduleTasks;
using Nop.Services.Stores;
using Nop.Web.Framework.Infrastructure;

namespace Nop.Plugin.Misc.FluidApi
{
	public class FluidApiPlugin: BasePlugin, IMiscPlugin
    {
        #region Fields
        private readonly ISettingService _settingService;
        private readonly WidgetSettings _widgetSettings;
        private readonly ILocalizationService _localizationService;
        private readonly IWebHelper _webHelper;
        #endregion
        #region Ctor
        public FluidApiPlugin(ISettingService srv, WidgetSettings wset, ILocalizationService loc, IWebHelper whpl)
        {
            _settingService = srv;
            _widgetSettings = wset;
            _localizationService = loc;
            _webHelper = whpl;
        }

        public bool HideInWidgetList => throw new NotImplementedException();

       
        public Task<IList<string>> GetWidgetZonesAsync()
        {
            return Task.FromResult<IList<string>>(new List<string> { PublicWidgetZones.HeadHtmlTag });
        }
        #endregion
        #region Methods
        /// <summary>
        /// Gets a configuration page URL
        /// </summary>
        public override string GetConfigurationPageUrl()
        {
            return $"{_webHelper.GetStoreLocation()}Admin/FluidApi/Configure";
        }
        public override async Task InstallAsync()
        {
            //settings
            await _settingService.SaveSettingAsync(new FluidApiSettings
            {
                enabled=false
            });

            if (!_widgetSettings.ActiveWidgetSystemNames.Contains(FluidApiDefaults.SystemName))
            {
                _widgetSettings.ActiveWidgetSystemNames.Add(FluidApiDefaults.SystemName);
                await _settingService.SaveSettingAsync(_widgetSettings);
            }

            //locales
            await _localizationService.AddOrUpdateLocaleResourceAsync(new Dictionary<string, string>
            {
                
                ["Plugins.Misc.FluidApi.Fields.TrackingScript"] = "Tracking script",
                ["Plugins.Misc.FluidApi.Fields.TrackingScript.Hint"] = $"Paste the tracking script generated by FluidApi here. {FluidApiDefaults.SystemName} and {FluidApiDefaults.SystemName} will be dynamically replaced.",
                ["Plugins.Misc.FluidApi.Fields.UseMarketingAutomation"] = "Use Marketing Automation",
                ["Plugins.Misc.FluidApi.Fields.UseMarketingAutomation.Hint"] = "Check for enable FluidApi Automation.",                
                ["Plugins.Misc.FluidApi.UseFluidApiTemplate"] = "FluidApi template"
            });

            await base.InstallAsync();
        }
        public override async Task UninstallAsync()
        {

            //settings
            if (_widgetSettings.ActiveWidgetSystemNames.Contains(FluidApiDefaults.SystemName))
            {
                _widgetSettings.ActiveWidgetSystemNames.Remove(FluidApiDefaults.SystemName);
                await _settingService.SaveSettingAsync(_widgetSettings);
            }
            await _settingService.DeleteSettingAsync<FluidApiSettings>();

            //locales
            await _localizationService.DeleteLocaleResourcesAsync("Plugins.Misc.FluidApi");

            await base.UninstallAsync();
        }
        #endregion
    }
}

